library CDC_HbA1c_lessthan8 version '1'

using QUICK version '3.3.0'

codesystem "SNOMED-CT": '2.16.840.1.113883.6.96' version '20200301'

valueset "Acute Inpatient": '2.16.840.1.113762.1.4.1182.120'
valueset "Outpatient": '2.16.840.1.113883.3.464.1003.101.12.1008'
valueset "ED": '2.16.840.1.113883.3.464.1003.101.12.1085'
valueset "Observation enc": '2.16.840.1.113762.1.4.1181.72'
valueset "Nonacute Inpatient Stay": '2.16.840.1.113762.1.4.1182.289'
valueset "Telephone Visits": '2.16.840.1.113883.3.1444.5.216'
valueset "Online Assessments": '2.16.840.1.113883.3.7587.3.1013' // not right temp holder
valueset "Nonacute Inpatient": '2.16.840.1.113883.3.464.1003.101.12.1084'
/* valueset "HbA1c Level Less Than 7.0": '2.16.840.1.113883.3.464.1003.198.11.1024' // need to find */
/* valueset "HbA1c Level Greater Than or Equal to 7.0 and Less Than 8.0": '2.16.840.1.113883.3.464.1003.198.11.1024'  // need to find */
valueset "Hospice Encounter": '2.16.840.1.113762.1.4.1182.2'
valueset "Hospice Intervention": '2.16.840.1.113762.1.4.1182.2'
valueset "Diabetes": '2.16.840.1.113883.3.464.1003.103.12.1001'
valueset "HbA1c Lab Test": '2.16.840.1.113883.3.464.1003.198.11.1024'
valueset "Telehealth Modifier": '2.16.840.1.113762.1.4.1138.731'
valueset "Telehealth POS": '2.16.840.1.113883.3.464.1003.101.11.1155'
valueset "Frailty Device": '2.16.840.1.113883.3.464.1003.118.12.1300'
valueset "Frailty Diagnosis": '2.16.840.1.113883.3.464.1003.113.11.1309'
valueset "Frailty Encounter": '2.16.840.1.113883.3.464.1003.101.12.1088'
valueset "Frailty Symptom": '2.16.840.1.113883.3.464.1003.113.12.1075'
valueset "Advanced Illness": '2.16.840.1.113883.3.464.1003.110.12.1082'
valueset "Inpatient Stay": '2.16.840.1.113762.1.4.1182.285'

code "Acarbose_code": '386965004' from "SNOMED-CT"
code "Miglitol": '109071007' from "SNOMED-CT"
code "insulin aspart": '325072002' from "SNOMED-CT"

concept "diabetes medication": {
  "Acarbose_code",
  "Miglitol",
  "insulin aspart"
} display 'diabetes medication'

parameter MeasurementPeriod default Interval[@2018-12-31T00:00:00.0, @2019-12-31T00:00:00.0)

context Patient

define "InitialPopulation":
    AgeInYearsAt(start of MeasurementPeriod) >= 18 and AgeInYearsAt(start of MeasurementPeriod) < 75

define "telehealth modifier":
  exists ([Encounter: "Telehealth Modifier"] E
    where E.period starts during MeasurementPeriod)

define "telehealth POS":
  exists ([Encounter: "Telehealth POS"] E
    where E.period starts during MeasurementPeriod)

define "acute inpatient encounter":
  exists ([Encounter: "Acute Inpatient"] E
    with [Condition: "Diabetes"] D
    such that E.period starts during MeasurementPeriod)

define "acute inpatient encounter without telehealth":
  "acute inpatient encounter"
    and not "telehealth POS"
    and not "telehealth modifier"

define "acute inpatient discharge with diabetes":
  [Encounter: "Acute Inpatient"] Enc
    with [Condition: "Diabetes"] Dia
      such that Enc.status = 'finished'
      and Enc.period starts during MeasurementPeriod

define "acute inpatient discharge on discharge claim":
  exists ("acute inpatient discharge with diabetes" Enc
    with [Claim: "Acute Inpatient"] AI
      such that Enc.subject = AI.patient)

define "nonacute diabetes discharges":
  [Encounter: "Nonacute Inpatient Stay"] E
    with [Condition: "Diabetes"] Dia
      such that E.status ~ 'finished'

define "nonacute diabetes discharges on claim":
  "nonacute diabetes discharges" E
    with [Claim: "Nonacute Inpatient Stay"] C
      such that E.subject = C.patient

/* define "outpatient encounter":
  exists([Encounter: "Outpatient"] E
    with [Condition: "Diabetes"] dia
      such that E.status = 'finished')

define "outpatient encounter - list":
  [Encounter: "Outpatient"] E
    with [Condition: "Diabetes"] dia
      such that E.status = 'finished'

define "observation encounter":
  exists([Encounter: "Observation"] E
    with [Condition: "Diabetes"] dia
      such that E.status = 'finished') */

define "nonacute outpatient encounters with diabetes":
 // Atleeast 2 of the following encounters with diabetes  on different dates of service
 // TODO: reference discharge claim *** THIS NEEDS WORK ***
  Count({exists([Encounter: "Outpatient"] E with [Condition: "Diabetes"] dia such that E.status = 'finished'),
        exists([Encounter: "Observation enc"] F with [Condition: "Diabetes"] dia such that F.status = 'finished'),
        exists([Encounter: "Telephone Visits"] G with [Condition: "Diabetes"] dia such that G.status = 'finished'),
        exists([Encounter: "Online Assessments"] H with [Condition: "Diabetes"] dia such that H.status = 'finished'),
        exists([Encounter: "ED"] I with [Condition: "Diabetes"] dia such that I.status = 'finished')})>=2

  //TODO: only one outpatient telephone visit, telephone visit or online assessment, can't be two of these

// 2 encounters (1 non acute, non acute cannot be telehealth)
// how many qualifies non acute, if atleast 2 then ur done
// aree there non acutes that aren't telehealth

// atleast 2 outpatient, observation, telephone, online assessment, ED, nonacute inpatient encounter, non acute inpatient discharges
// diagnosis must be on discharge claim
// on different dates of service
// with diagnosis of diabetes
// only include non acute without telehealth
// only one can outpatient telehealth, telephone visit, online assessment

define "diabetes diagnosis by medication":
  //TODO: figure out how to do medication dynamically to avoid version control conflict
  exists([MedicationDispense] A
    where A.medication = "Acarbose_code"
    and A.status ~ 'completed')
    or exists([MedicationDispense] B
      where B.medication = "Miglitol"
      and B.status ~ 'completed')
      or exists([MedicationDispense] C
        where C.medication = "insulin aspart"
        and C.status ~ 'completed')

define "Frailty":
  exists([Encounter: "Frailty Device"] D
    where D.period starts during MeasurementPeriod)
    or exists([Encounter: "Frailty Diagnosis"] Dia
      where Dia.period starts during MeasurementPeriod)
      or exists([Encounter: "Frailty Encounter"] E
        where E.period starts during MeasurementPeriod)
        or exists([Encounter: "Frailty Symptom"] S
          where S.period starts during MeasurementPeriod)
            //TODO: age > 66

define "Acute Inpatient with Advanced Illness":
    exists ([Condition: "Advanced Illness"]) and  exists ([Encounter : "Acute Inpatient"])

define "Acute inpatient discharge with Advanced Illness":
  exists ([Encounter: "Acute Inpatient"] E
    with [Condition: "Advanced Illness"] AI
      such that E.status ~ 'finished')

define "diabetes exclusions":
    "Frailty" and ("Acute inpatient discharge with Advanced Illness" or "Acute Inpatient with Advanced Illness")
    // TODO: atleast 2 outpatients w/ advanced Illness

define "DiabetesCondition":
  "acute inpatient encounter without telehealth"
    or "acute inpatient discharge on discharge claim"
    or "nonacute outpatient encounters with diabetes"
    or "diabetes diagnosis by medication"
// this will need to be manually changed in the ELM to include O.valueQuantity.value.
/* {
            "name" : "HbA1c < 8",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "type" : "Exists",
               "operand" : {
                  "type" : "Query",
                  "source" : [ {
                     "alias" : "O",
                     "expression" : {
                        "dataType" : "{http://hl7.org/fhir/us/qicore}Observation",
                        "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-observation",
                        "codeProperty" : "code",
                        "codeComparator" : "in",
                        "type" : "Retrieve",
                        "codes" : {
                           "name" : "HbA1c Lab Test",
                           "type" : "ValueSetRef"
                        }
                     }
                  } ],
                  "relationship" : [ ],
                  "where" : {
                     "type" : "Less",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "valueQuantity",
                           "scope" : "O",
                           "type" : "Property"
                        }
                     }, {
                        "type" : "ToDecimal",
                        "operand" : {
                           "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                           "value" : "8",
                           "type" : "Literal"
                        }
                     } ]
                  }
               }
            }
         } */
define "HbA1c < 8":
  exists ([Observation: "HbA1c Lab Test"] O
    where O.value < 8)

define "numerator":
  case ("HbA1c < 8" and "DiabetesCondition" and "InitialPopulation")
    when true then 1
    else 0
  end

define "denominator":
  case ("InitialPopulation" and "DiabetesCondition")
    when true then 1
    else 0
  end

context Unfiltered

define "denominator_count":
  Sum(denominator)

define "numerator_count":
  Sum(numerator)

define "CDC_MeasureScore":
  Sum(numerator) / Sum(denominator)
